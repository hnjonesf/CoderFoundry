//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FinalTemplate
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FinancialEntities : DbContext
    {
        public FinancialEntities()
            : base("name=FinancialEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<BudgetItem> BudgetItems { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Household> Households { get; set; }
        public virtual DbSet<Insight_SchemaRegistry> Insight_SchemaRegistry { get; set; }
        public virtual DbSet<Invitation> Invitations { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<UserClaim> UserClaims { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int DeleteAccount(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAccount", idParameter);
        }
    
        public virtual int DeleteBudgetItem(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBudgetItem", idParameter);
        }
    
        public virtual int DeleteCategory(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCategory", idParameter);
        }
    
        public virtual int DeleteHousehold(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteHousehold", idParameter);
        }
    
        public virtual int DeleteInvitation(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteInvitation", idParameter);
        }
    
        public virtual int DeleteTransaction(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTransaction", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertAccount(Nullable<int> houseHoldId, string name, Nullable<decimal> balance, Nullable<decimal> reconciledBalance, Nullable<int> userId)
        {
            var houseHoldIdParameter = houseHoldId.HasValue ?
                new ObjectParameter("HouseHoldId", houseHoldId) :
                new ObjectParameter("HouseHoldId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var reconciledBalanceParameter = reconciledBalance.HasValue ?
                new ObjectParameter("ReconciledBalance", reconciledBalance) :
                new ObjectParameter("ReconciledBalance", typeof(decimal));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertAccount", houseHoldIdParameter, nameParameter, balanceParameter, reconciledBalanceParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertBudgetItem(Nullable<int> houseHoldId, Nullable<int> categoryId, Nullable<decimal> amount)
        {
            var houseHoldIdParameter = houseHoldId.HasValue ?
                new ObjectParameter("HouseHoldId", houseHoldId) :
                new ObjectParameter("HouseHoldId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertBudgetItem", houseHoldIdParameter, categoryIdParameter, amountParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertCategory(Nullable<int> houseHoldId, string name)
        {
            var houseHoldIdParameter = houseHoldId.HasValue ?
                new ObjectParameter("HouseHoldId", houseHoldId) :
                new ObjectParameter("HouseHoldId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertCategory", houseHoldIdParameter, nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertHousehold(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertHousehold", nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertInvitation(Nullable<int> fromUserId, Nullable<int> toEmail)
        {
            var fromUserIdParameter = fromUserId.HasValue ?
                new ObjectParameter("FromUserId", fromUserId) :
                new ObjectParameter("FromUserId", typeof(int));
    
            var toEmailParameter = toEmail.HasValue ?
                new ObjectParameter("ToEmail", toEmail) :
                new ObjectParameter("ToEmail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertInvitation", fromUserIdParameter, toEmailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertTransaction(Nullable<int> accountId, Nullable<decimal> amount, Nullable<decimal> absAmount, Nullable<decimal> reconciledAmount, Nullable<decimal> absReconciledAmount, Nullable<System.DateTimeOffset> date, string description, Nullable<System.DateTimeOffset> updated, Nullable<int> updatedByUserId, Nullable<int> categoryId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var absAmountParameter = absAmount.HasValue ?
                new ObjectParameter("AbsAmount", absAmount) :
                new ObjectParameter("AbsAmount", typeof(decimal));
    
            var reconciledAmountParameter = reconciledAmount.HasValue ?
                new ObjectParameter("ReconciledAmount", reconciledAmount) :
                new ObjectParameter("ReconciledAmount", typeof(decimal));
    
            var absReconciledAmountParameter = absReconciledAmount.HasValue ?
                new ObjectParameter("AbsReconciledAmount", absReconciledAmount) :
                new ObjectParameter("AbsReconciledAmount", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTimeOffset));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTimeOffset));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertTransaction", accountIdParameter, amountParameter, absAmountParameter, reconciledAmountParameter, absReconciledAmountParameter, dateParameter, descriptionParameter, updatedParameter, updatedByUserIdParameter, categoryIdParameter);
        }
    
        public virtual ObjectResult<SelectAccount_Result> SelectAccount(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAccount_Result>("SelectAccount", idParameter);
        }
    
        public virtual ObjectResult<SelectBudgetItem_Result> SelectBudgetItem(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectBudgetItem_Result>("SelectBudgetItem", idParameter);
        }
    
        public virtual ObjectResult<SelectCategory_Result> SelectCategory(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCategory_Result>("SelectCategory", idParameter);
        }
    
        public virtual ObjectResult<SelectHousehold_Result> SelectHousehold(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectHousehold_Result>("SelectHousehold", idParameter);
        }
    
        public virtual ObjectResult<SelectInvitation_Result> SelectInvitation(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectInvitation_Result>("SelectInvitation", idParameter);
        }
    
        public virtual ObjectResult<SelectTransaction_Result> SelectTransaction(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectTransaction_Result>("SelectTransaction", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateAccount(Nullable<int> id, Nullable<int> houseHoldId, string name, Nullable<decimal> balance, Nullable<decimal> reconciledBalance, Nullable<int> userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var houseHoldIdParameter = houseHoldId.HasValue ?
                new ObjectParameter("HouseHoldId", houseHoldId) :
                new ObjectParameter("HouseHoldId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var reconciledBalanceParameter = reconciledBalance.HasValue ?
                new ObjectParameter("ReconciledBalance", reconciledBalance) :
                new ObjectParameter("ReconciledBalance", typeof(decimal));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateAccount", idParameter, houseHoldIdParameter, nameParameter, balanceParameter, reconciledBalanceParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateBudgetItem(Nullable<int> id, Nullable<int> houseHoldId, Nullable<int> categoryId, Nullable<decimal> amount)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var houseHoldIdParameter = houseHoldId.HasValue ?
                new ObjectParameter("HouseHoldId", houseHoldId) :
                new ObjectParameter("HouseHoldId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateBudgetItem", idParameter, houseHoldIdParameter, categoryIdParameter, amountParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateCategory(Nullable<int> id, Nullable<int> houseHoldId, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var houseHoldIdParameter = houseHoldId.HasValue ?
                new ObjectParameter("HouseHoldId", houseHoldId) :
                new ObjectParameter("HouseHoldId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateCategory", idParameter, houseHoldIdParameter, nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateHousehold(Nullable<int> id, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateHousehold", idParameter, nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateInvitation(Nullable<int> id, Nullable<int> fromUserId, Nullable<int> toEmail)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromUserIdParameter = fromUserId.HasValue ?
                new ObjectParameter("FromUserId", fromUserId) :
                new ObjectParameter("FromUserId", typeof(int));
    
            var toEmailParameter = toEmail.HasValue ?
                new ObjectParameter("ToEmail", toEmail) :
                new ObjectParameter("ToEmail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateInvitation", idParameter, fromUserIdParameter, toEmailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateTransaction(Nullable<int> id, Nullable<int> accountId, Nullable<decimal> amount, Nullable<decimal> absAmount, Nullable<decimal> reconciledAmount, Nullable<decimal> absReconciledAmount, Nullable<System.DateTimeOffset> date, string description, Nullable<System.DateTimeOffset> updated, Nullable<int> updatedByUserId, Nullable<int> categoryId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var absAmountParameter = absAmount.HasValue ?
                new ObjectParameter("AbsAmount", absAmount) :
                new ObjectParameter("AbsAmount", typeof(decimal));
    
            var reconciledAmountParameter = reconciledAmount.HasValue ?
                new ObjectParameter("ReconciledAmount", reconciledAmount) :
                new ObjectParameter("ReconciledAmount", typeof(decimal));
    
            var absReconciledAmountParameter = absReconciledAmount.HasValue ?
                new ObjectParameter("AbsReconciledAmount", absReconciledAmount) :
                new ObjectParameter("AbsReconciledAmount", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTimeOffset));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var updatedParameter = updated.HasValue ?
                new ObjectParameter("Updated", updated) :
                new ObjectParameter("Updated", typeof(System.DateTimeOffset));
    
            var updatedByUserIdParameter = updatedByUserId.HasValue ?
                new ObjectParameter("UpdatedByUserId", updatedByUserId) :
                new ObjectParameter("UpdatedByUserId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateTransaction", idParameter, accountIdParameter, amountParameter, absAmountParameter, reconciledAmountParameter, absReconciledAmountParameter, dateParameter, descriptionParameter, updatedParameter, updatedByUserIdParameter, categoryIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> AddUserToRole(Nullable<int> userId, string roleName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("AddUserToRole", userIdParameter, roleNameParameter);
        }
    
        public virtual int DeleteRole(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRole", idParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", idParameter);
        }
    
        public virtual int DeleteUserClaim(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserClaim", idParameter);
        }
    
        public virtual int DeleteUserLogin(Nullable<int> userId, Nullable<int> loginProvider, Nullable<int> providerKey)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var loginProviderParameter = loginProvider.HasValue ?
                new ObjectParameter("LoginProvider", loginProvider) :
                new ObjectParameter("LoginProvider", typeof(int));
    
            var providerKeyParameter = providerKey.HasValue ?
                new ObjectParameter("ProviderKey", providerKey) :
                new ObjectParameter("ProviderKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserLogin", userIdParameter, loginProviderParameter, providerKeyParameter);
        }
    
        public virtual int DeleteUserRole(Nullable<int> userId, Nullable<int> roleId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserRole", userIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<FindUserByEmail_Result> FindUserByEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindUserByEmail_Result>("FindUserByEmail", emailParameter);
        }
    
        public virtual ObjectResult<FindUserByLogin_Result> FindUserByLogin(string loginProvider, string providerKey)
        {
            var loginProviderParameter = loginProvider != null ?
                new ObjectParameter("loginProvider", loginProvider) :
                new ObjectParameter("loginProvider", typeof(string));
    
            var providerKeyParameter = providerKey != null ?
                new ObjectParameter("providerKey", providerKey) :
                new ObjectParameter("providerKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindUserByLogin_Result>("FindUserByLogin", loginProviderParameter, providerKeyParameter);
        }
    
        public virtual ObjectResult<FindUserByUserName_Result> FindUserByUserName(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindUserByUserName_Result>("FindUserByUserName", userNameParameter);
        }
    
        public virtual ObjectResult<GetLoginsForUser_Result> GetLoginsForUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLoginsForUser_Result>("GetLoginsForUser", userIdParameter);
        }
    
        public virtual ObjectResult<GetRolesForUser_Result> GetRolesForUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRolesForUser_Result>("GetRolesForUser", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserClaims_Result> GetUserClaims(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserClaims_Result>("GetUserClaims", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertRole(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertRole", nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUser(Nullable<int> houseHoldId, string userName, string email, string passwordHash, string securityStamp, Nullable<bool> isDeleted, Nullable<bool> isLockedOut, string passwordResetTocken, Nullable<System.DateTimeOffset> passwordResetExpiry, Nullable<System.DateTimeOffset> lockoutEndDate, Nullable<int> accessFailedCount, Nullable<bool> emailConfirmed, Nullable<bool> lockoutEnabled)
        {
            var houseHoldIdParameter = houseHoldId.HasValue ?
                new ObjectParameter("HouseHoldId", houseHoldId) :
                new ObjectParameter("HouseHoldId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var securityStampParameter = securityStamp != null ?
                new ObjectParameter("SecurityStamp", securityStamp) :
                new ObjectParameter("SecurityStamp", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isLockedOutParameter = isLockedOut.HasValue ?
                new ObjectParameter("IsLockedOut", isLockedOut) :
                new ObjectParameter("IsLockedOut", typeof(bool));
    
            var passwordResetTockenParameter = passwordResetTocken != null ?
                new ObjectParameter("PasswordResetTocken", passwordResetTocken) :
                new ObjectParameter("PasswordResetTocken", typeof(string));
    
            var passwordResetExpiryParameter = passwordResetExpiry.HasValue ?
                new ObjectParameter("PasswordResetExpiry", passwordResetExpiry) :
                new ObjectParameter("PasswordResetExpiry", typeof(System.DateTimeOffset));
    
            var lockoutEndDateParameter = lockoutEndDate.HasValue ?
                new ObjectParameter("LockoutEndDate", lockoutEndDate) :
                new ObjectParameter("LockoutEndDate", typeof(System.DateTimeOffset));
    
            var accessFailedCountParameter = accessFailedCount.HasValue ?
                new ObjectParameter("AccessFailedCount", accessFailedCount) :
                new ObjectParameter("AccessFailedCount", typeof(int));
    
            var emailConfirmedParameter = emailConfirmed.HasValue ?
                new ObjectParameter("EmailConfirmed", emailConfirmed) :
                new ObjectParameter("EmailConfirmed", typeof(bool));
    
            var lockoutEnabledParameter = lockoutEnabled.HasValue ?
                new ObjectParameter("LockoutEnabled", lockoutEnabled) :
                new ObjectParameter("LockoutEnabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUser", houseHoldIdParameter, userNameParameter, emailParameter, passwordHashParameter, securityStampParameter, isDeletedParameter, isLockedOutParameter, passwordResetTockenParameter, passwordResetExpiryParameter, lockoutEndDateParameter, accessFailedCountParameter, emailConfirmedParameter, lockoutEnabledParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertUserClaim(Nullable<int> userId, string claimType, string claimValue)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var claimValueParameter = claimValue != null ?
                new ObjectParameter("ClaimValue", claimValue) :
                new ObjectParameter("ClaimValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertUserClaim", userIdParameter, claimTypeParameter, claimValueParameter);
        }
    
        public virtual int InsertUserLogin(Nullable<int> userId, Nullable<int> loginProvider, Nullable<int> providerKey)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var loginProviderParameter = loginProvider.HasValue ?
                new ObjectParameter("LoginProvider", loginProvider) :
                new ObjectParameter("LoginProvider", typeof(int));
    
            var providerKeyParameter = providerKey.HasValue ?
                new ObjectParameter("ProviderKey", providerKey) :
                new ObjectParameter("ProviderKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserLogin", userIdParameter, loginProviderParameter, providerKeyParameter);
        }
    
        public virtual int InsertUserRole(Nullable<int> userId, Nullable<int> roleId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserRole", userIdParameter, roleIdParameter);
        }
    
        public virtual int RemoveUserClaim(Nullable<int> userId, string claimType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("claimType", claimType) :
                new ObjectParameter("claimType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveUserClaim", userIdParameter, claimTypeParameter);
        }
    
        public virtual int RemoveUserFromRole(Nullable<int> userId, string role)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveUserFromRole", userIdParameter, roleParameter);
        }
    
        public virtual ObjectResult<SelectRole_Result> SelectRole(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectRole_Result>("SelectRole", idParameter);
        }
    
        public virtual ObjectResult<SelectUser_Result> SelectUser(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUser_Result>("SelectUser", idParameter);
        }
    
        public virtual ObjectResult<SelectUserClaim_Result> SelectUserClaim(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUserClaim_Result>("SelectUserClaim", idParameter);
        }
    
        public virtual ObjectResult<SelectUserLogin_Result> SelectUserLogin(Nullable<int> userId, Nullable<int> loginProvider, Nullable<int> providerKey)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var loginProviderParameter = loginProvider.HasValue ?
                new ObjectParameter("LoginProvider", loginProvider) :
                new ObjectParameter("LoginProvider", typeof(int));
    
            var providerKeyParameter = providerKey.HasValue ?
                new ObjectParameter("ProviderKey", providerKey) :
                new ObjectParameter("ProviderKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUserLogin_Result>("SelectUserLogin", userIdParameter, loginProviderParameter, providerKeyParameter);
        }
    
        public virtual ObjectResult<SelectUserRole_Result> SelectUserRole(Nullable<int> userId, Nullable<int> roleId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUserRole_Result>("SelectUserRole", userIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateRole(Nullable<int> id, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateRole", idParameter, nameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateUser(Nullable<int> id, Nullable<int> houseHoldId, string userName, string email, string passwordHash, string securityStamp, Nullable<bool> isDeleted, Nullable<bool> isLockedOut, string passwordResetTocken, Nullable<System.DateTimeOffset> passwordResetExpiry, Nullable<System.DateTimeOffset> lockoutEndDate, Nullable<int> accessFailedCount, Nullable<bool> emailConfirmed, Nullable<bool> lockoutEnabled)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var houseHoldIdParameter = houseHoldId.HasValue ?
                new ObjectParameter("HouseHoldId", houseHoldId) :
                new ObjectParameter("HouseHoldId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var securityStampParameter = securityStamp != null ?
                new ObjectParameter("SecurityStamp", securityStamp) :
                new ObjectParameter("SecurityStamp", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isLockedOutParameter = isLockedOut.HasValue ?
                new ObjectParameter("IsLockedOut", isLockedOut) :
                new ObjectParameter("IsLockedOut", typeof(bool));
    
            var passwordResetTockenParameter = passwordResetTocken != null ?
                new ObjectParameter("PasswordResetTocken", passwordResetTocken) :
                new ObjectParameter("PasswordResetTocken", typeof(string));
    
            var passwordResetExpiryParameter = passwordResetExpiry.HasValue ?
                new ObjectParameter("PasswordResetExpiry", passwordResetExpiry) :
                new ObjectParameter("PasswordResetExpiry", typeof(System.DateTimeOffset));
    
            var lockoutEndDateParameter = lockoutEndDate.HasValue ?
                new ObjectParameter("LockoutEndDate", lockoutEndDate) :
                new ObjectParameter("LockoutEndDate", typeof(System.DateTimeOffset));
    
            var accessFailedCountParameter = accessFailedCount.HasValue ?
                new ObjectParameter("AccessFailedCount", accessFailedCount) :
                new ObjectParameter("AccessFailedCount", typeof(int));
    
            var emailConfirmedParameter = emailConfirmed.HasValue ?
                new ObjectParameter("EmailConfirmed", emailConfirmed) :
                new ObjectParameter("EmailConfirmed", typeof(bool));
    
            var lockoutEnabledParameter = lockoutEnabled.HasValue ?
                new ObjectParameter("LockoutEnabled", lockoutEnabled) :
                new ObjectParameter("LockoutEnabled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateUser", idParameter, houseHoldIdParameter, userNameParameter, emailParameter, passwordHashParameter, securityStampParameter, isDeletedParameter, isLockedOutParameter, passwordResetTockenParameter, passwordResetExpiryParameter, lockoutEndDateParameter, accessFailedCountParameter, emailConfirmedParameter, lockoutEnabledParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateUserClaim(Nullable<int> id, Nullable<int> userId, string claimType, string claimValue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var claimValueParameter = claimValue != null ?
                new ObjectParameter("ClaimValue", claimValue) :
                new ObjectParameter("ClaimValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateUserClaim", idParameter, userIdParameter, claimTypeParameter, claimValueParameter);
        }
    
        public virtual int UpdateUserLogin(Nullable<int> userId, Nullable<int> loginProvider, Nullable<int> providerKey)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var loginProviderParameter = loginProvider.HasValue ?
                new ObjectParameter("LoginProvider", loginProvider) :
                new ObjectParameter("LoginProvider", typeof(int));
    
            var providerKeyParameter = providerKey.HasValue ?
                new ObjectParameter("ProviderKey", providerKey) :
                new ObjectParameter("ProviderKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserLogin", userIdParameter, loginProviderParameter, providerKeyParameter);
        }
    
        public virtual int UpdateUserRole(Nullable<int> userId, Nullable<int> roleId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserRole", userIdParameter, roleIdParameter);
        }
    }
}
